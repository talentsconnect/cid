#!/bin/sh

### image_tool -- Tool to prepare docker volumes

: ${package:=cid}
: ${packagedir:=/cid}
: ${prefix:=/usr/local}
: ${cachedir:=${prefix}/var/cache${packagedir}}

. './subr.sh'

volume_has_config()
{
    grep -q "^# $1: " "$2"
}

volume_get_config()
{
    sed -n -e "s/^# $1: //p" "$2"
}

volume_extra_volumes()
{
    sed -n -e "s/^# Volume: /--volume cid-${volume_project}-/p" "$1"
}

# volume_populate [-u USER] VOLUME-NAME
#  Run the populate script for the given volume.

volume_populate__docker_run()
{
    docker run -i --rm\
           --volume "cid-${volume_project}-$1:${volume_mnt}"\
           ${extravolumes}\
           ${useroption}\
           "${volume_image}"\
           sh -c "${script}"
}

# volume_populate VOLUME-NAME
#  Prepare the volume VOLUME-NAME
#
#
# The actual name of the volume is cid-${volume_project}-VOLUME-NAME.
# To populate volume contents the file ${volume_scriptdir}/VOLUME-NAME
# is interpreted as a shell script running as root in a docker
# container where the volume to populate is avaialble.
#
#
# THE POPULATE SCRIPT (${volume_scriptdir}/VOLUME-NAME)
#
# The populate script can contain the special comment
#
#   # Mount: PATH-TO-MOUNT-POINT
#
# to specify a path where the volume should be mounted instead of
# the implicit value /mnt.
#
#
# The populate script can contain the special comment
#
#   # Image: ALT-DOCKER-IMAGE
#
# to specify a specific docker image instead of the implicit
# cid/linux:latest.
#
#
# The initalisation script can contain one or more special comments
#
#   # Volume: EXTRA-VOLUME-NAME:PATH-TO-MOUNT-POINT
#
# to specify a volume and a path where the corresponding volume should
# be mounted. The actual volume name used is
# cid-${volume_project}-EXTRA-VOLUME-NAME.
#
#
# THE POPULATE DATA (${volume_configdir}/VOLUME-NAME)
#
# The populate script may receive populate data from STDIN if such
# information is available under ${volume_configdir}/VOLUME-NAME:
#
#  1. When the populate data is a directory, this directory is tarred
#     to populate script's stdin.
#
#  2. When the populate data is a regular file, this file content's is
#     sent to populate script's stdin.
#
#  3. When no populate data is available, no special provision is
#     taken when running the populate script.
#
#
# Options:
#  -u USER
#     Run the populate script under the identity of USER instead of root.

volume_populate()
{
    local OPTIND OPTION OPTARG useroption script extravolumes

    status=1
    OPTIND=1
    useroption=''

    while getopts 'u:' OPTION; do
        case ${OPTION} in
            u)	useroption="--user ${OPTARG}";;
            *)	failwith '%s: Unsupported option.' "${OPTION}";;
        esac
    done

    shift $(expr ${OPTIND} - 1)

    if [ ! -r "${volume_scriptdir}/$1" ]; then
        failwith '%s: Populate script not found.' "$1"
    fi

    if volume_has_config 'Image' "${volume_scriptdir}/$1"; then
        volume_image=$(volume_get_config 'Image' "${volume_scriptdir}/$1")
    fi

    if volume_has_config 'Mount' "${volume_scriptdir}/$1"; then
        volume_mnt=$(volume_get_config 'Mount' "${volume_scriptdir}/$1")
    fi

    script=$(cat "${volume_scriptdir}/$1")
    extravolumes=$(volume_extra_volumes "${volume_scriptdir}/$1")

    if [ -d "${volume_configdir}/$1" ]; then
        wlog 'Info' '%s: Populate configuration directory found.' "$1"
        tar cfC - "${volume_configdir}/$1" . | volume_populate__docker_run "$1"
    elif [ -f "${volume_configdir}/$1" ]; then
        wlog 'Info' '%s: Populate configuration file found.' "$1"
        volume_populate__docker_run "$1" < "${volume_configdir}/$1"
    else
        wlog 'Info' '%s: Populate configuration not found.' "$1"
        volume_populate__docker_run "$1"
    fi
}

volume_create()
{
    docker volume create "cid-${volume_project}-$1"
}

volume_rm()
{
    docker volume create "cid-${volume_project}-$1"
}

volume_update()
{
    volume_rm "$@"
    volume_create "$@"
    volume_populate "$@"
}


#
# Main
#

volume_image='cid/linux:latest'
volume_mnt='/mnt'
volume_project='local'
volume_scriptdir='./volume'
volume_configdir='/nonexistant'
volume_list='ssh gpg'
volume_action='help'

volume_main()
{
    local OPTIND OPTION OPTARG volume

    status=1
    OPTIND=1

    while getopts 'CPRUc:p:s:' OPTION; do
        case ${OPTION} in
            C)	volume_action='create';;
            P)	volume_action='populate';;
            R)	volume_action='rm';;
            U)	volume_action='update';;
            c)	volume_configdir="${OPTARG}";;
            p)	volume_project="${OPTARG}";;
            s)	volume_scriptdir="${OPTARG}";;
            *)	failwith -x 70 'volume_tool: %s: Unsupported option.' "${OPTION}";;
        esac
    done
    shift $(expr ${OPTIND} - 1)

    if [ $# -eq 0 ]; then
        set -- ${volume_list}
    fi

    for volume in "$@"; do
        "volume_${volume_action}" "${volume}"
    done
}

volume_main "$@"
