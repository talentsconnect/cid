#!/bin/sh

### image_tool -- Tool to prepare docker volumes

: ${package:=cid}
: ${packagedir:=/cid}
: ${prefix:=/usr/local}
: ${cachedir:=${prefix}/var/cache${packagedir}}

. './subr.sh'


# volume_has_config KEY VOLUME-SCRIPT
#  Test for VOLUME-SCRIPT containing configuration KEY.

volume_has_config()
{
    grep -q "^# $1: " "$2"
}


# volume_get_config KEY VOLUME-SCRIPT
#  Get configuration KEY for VOLUME-SCRIPT.

volume_get_config()
{
    sed -n -e "s/^# $1: *//p" "$2"
}


# volume_db VOLUME-SCRIPT
#  List volumes

volume_db()
{
    sed -n -e "
s/^# Volume: */${package}-${volume_project}-/p
s/: */:/
" "$1"
}


# volume_populate [-u USER] VOLUME-SCRIPT CONTEXT
#  Run the given populate script for the given volume.
#
#
# The populate script can contain special declarations in its
# comments:
#
#  # Volume: VOLUME-NAME-SUFFIX:MOUNT-POINT
#
# This arranges for the volume name
#
#  ${package}-${volume_project}-VOLUME-NAME-SUFFIX
#
# to be mounted at MOUNT-POINT in the container.
#
#
# The populate script can contain the special comment
#
#   # Image: ALT-DOCKER-IMAGE
#
# to specify a specific docker image instead of the implicit
# cid/linux:latest.
#
#
# The populate script is ran from a local copy of the CONTEXT within
# the container.

volume_populate()
{
    local OPTIND OPTION OPTARG script volumes contextscript

    status=1
    OPTIND=1
    useroption=''

    while getopts '' OPTION; do
        case ${OPTION} in
            *)	failwith '%s: Unsupported option.' "${OPTION}";;
        esac
    done

    shift $(expr ${OPTIND} - 1)

    if [ ! -r "${volume_scriptdir}/$1" ]; then
        failwith '%s: Populate script not found.' "$1"
    fi

    if [ ! -d "${volume_configdir}" ]; then
        failwith '%s: Populate context not found.' "$1"
    fi

    if volume_has_config 'Image' "${volume_scriptdir}/$1"; then
        volume_image=$(volume_get_config 'Image' "${volume_scriptdir}/$1")
    fi

    contextscript=$(volume_populate__contextscript)
    script=$(cat "${volume_scriptdir}/$1")
    volumes=$(volume_populate__volumes "${volume_scriptdir}/$1")

    tar cfC - "${volume_configdir}" .\
        | docker run -i --rm\
                 ${volumes}\
                 ${useroption}\
                 "${volume_image}"\
                 sh -c "${contextscript}${script}"
}

volume_populate__volumes()
{
    volume_db "$1" | sed -n -e "s/^/--volume /p"
}

volume_populate__contextscript()
{
    cat <<'EOF'
install -d /tmp/context
tar xfC - /tmp/context
trap 'rm -Rf /tmp/context' EXIT
cd /tmp/context;
EOF
}


volume_create()
{
    local volume

    if [ ! -r "${volume_scriptdir}/$1" ]; then
        failwith '%s: Populate script not found.' "$1"
    fi

    volume_db "${volume_scriptdir}/$1" | {
        while IFS=':' read volume _ ; do
            docker volume create "${volume}"
        done
    }
}

volume_rm()
{
    local volume

    if [ ! -r "${volume_scriptdir}/$1" ]; then
        failwith '%s: Populate script not found.' "$1"
    fi

    volume_db "${volume_scriptdir}/$1" | {
        while IFS=':' read volume _ ; do
            docker volume rm "${volume}"
        done
    }
}

volume_update()
{
    volume_rm "$@"
    volume_create "$@"
    volume_populate "$@"
}


#
# Main
#

volume_image='cid/linux:latest'
volume_mnt='/mnt'
volume_project='local'
volume_scriptdir='./volume'
volume_configdir='/nonexistant'
volume_list='
 git
 haproxy
 postgresql
 trac
'
volume_action='help'

volume_main()
{
    local OPTIND OPTION OPTARG volume

    status=1
    OPTIND=1

    while getopts 'CPRUc:p:s:' OPTION; do
        case ${OPTION} in
            C)	volume_action='create';;
            P)	volume_action='populate';;
            R)	volume_action='rm';;
            U)	volume_action='update';;
            c)	volume_configdir="${OPTARG}";;
            p)	volume_project="${OPTARG}";;
            s)	volume_scriptdir="${OPTARG}";;
            *)	failwith -x 70 'volume_tool: %s: Unsupported option.' "${OPTION}";;
        esac
    done
    shift $(expr ${OPTIND} - 1)

    if [ $# -eq 0 ]; then
        set -- ${volume_list}
    fi

    for volume in "$@"; do
        "volume_${volume_action}" "${volume}"
    done
}

volume_main "$@"
