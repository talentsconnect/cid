#!/bin/sh

### docker_build -- Docker build images

# El Cid (https://github.com/michipili/cid)
# This file is part of El Cid
#
# Copyright © 2018 Michael Grünewald
#
# This file must be used under the terms of the MIT license.
# This source file is licensed as described in the file LICENSE, which
# you should have received as part of this distribution. The terms
# are also available at
# https://opensource.org/licenses/MIT

: ${TOPLEVELDIR:=$(git rev-parse --show-toplevel)}
: ${subrdir:=${TOPLEVELDIR}/subr}
: ${dockerdir:=${TOPLEVELDIR}/docker}

. "${subrdir}/stdlib.sh"
. "${subrdir}/config.sh"

docker_build_package='cid'
docker_build_registry=''
docker_build_tag='latest'

# docker_build_db
#  The database of systems we can build
#
# It has the following columns:
#
#  SYSTEM-NAME

docker_build_db()
{
    find "${dockerdir}" -type f -name 'Dockerfile' \
         | sed -e 's@/Dockerfile@@;s@.*/@@'
}


# docker_build_image SYSTEM-NAME
#  Build the image for SYSTEM-NAME

docker_build_image()
{
    cd "${TOPLEVELDIR}"
    docker build\
           ${docker_build_argv}\
           ${docker_build_cacheflag}\
           -t "${docker_build_registry}${docker_build_registry:+/}${docker_build_package}/$1:${docker_build_tag}"\
           -f "./docker/image/$1/Dockerfile" .
}

docker_build_usage()
{
    iconv -f utf-8 <<EOF
Usage: docker_build [-t ARTEFACT-TAG] [-r REGISTRY] [-n] IMAGE-1
 Build docker image defined in current git working copy
Options:
 -h Display this help message.
 -n Build without cache.
 -t ARTEFACT-TAG
    Tag the produced image with ARTEFACT-TAG instead of 'latest'.
 -r The docker registry to use for tagging the images.
 -A DOCKER-BUILD-ARG
    Pass an argument to the docker build.
EOF
}

docker_build_main()
{
    local OPTIND OPTION OPTARG
    local image docker_build_cacheflag docker_argv

    docker_build_cacheflag=''
    docker_build_argv=''
    OPTIND=1

    while getopts 'nr:t:hA:' OPTION; do
        case ${OPTION} in
            h)	docker_build_usage; exit 0;;
            n)	docker_build_cacheflag="--no-cache";;
            r)	docker_build_registry="${OPTARG}";;
            t)	docker_build_tag="${OPTARG}";;
            A)	docker_build_argv="${docker_build_argv}${docker_build_argv:+ }--build-arg ${OPTARG}";;
            *)	docker_build_usage; failwith -x 70 'docker_build: %s: Unsupported option.' "${OPTION}";;
        esac
    done
    shift $(expr ${OPTIND} - 1)
    for image in "$@"; do
        docker_build_image "${image}"
    done
}

docker_build_main "$@"

### End of file `docker_build'
